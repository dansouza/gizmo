package v0001p0001v0001

import (
	"fmt"
	"io"
	"io/ioutil"
)

// Device encapsulates the behavior of device v0001p0001v0001
type Device struct{}

// VendorID returns the device's Vendor ID
func (d Device) VendorID() uint16 {
	return 0x1
}

// ProductID returns the device's Product ID
func (d Device) ProductID() uint16 {
	return 0x1
}

// Version returns the device's version number
func (d Device) Version() uint16 {
	return 0x1
}

// Name returns the consumer-friendly name of the device
func (d Device) Name() string {
	return "HITACHI Blue Lightsaber"
}

// Parse parses data according to the device
func (d Device) Parse(r io.Reader, w io.Writer) (int, error) {
	var input []byte
	var err error

	// reads from r, writes to w
	if input, err = ioutil.ReadAll(r); err != nil {
		return 0, err
	}
	return fmt.Fprintf(w, "input=%s\noutput generated by device vendor=%X productID=%X version=%X\n", string(input), d.VendorID(), d.ProductID(), d.Version())
}
